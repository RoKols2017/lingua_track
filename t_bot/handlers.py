"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputFile, BufferedInputFile
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, List
import io

from .api_client import DjangoAPIClient
from .config import MESSAGES

router = Router()
api_client = DjangoAPIClient()

# --- HTTP endpoint –¥–ª—è Celery —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
try:
    from aiohttp import web
    import asyncio

    async def notify_handler(request):
        try:
            data = await request.json()
            telegram_id = data.get('telegram_id')
            message_text = data.get('message')
            if not telegram_id or not message_text:
                return web.json_response({'error': 'telegram_id and message required'}, status=400)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ aiogram
            from .bot import Bot, BOT_TOKEN
            bot = Bot(token=BOT_TOKEN)
            await bot.send_message(chat_id=telegram_id, text=message_text)
            await bot.session.close()
            return web.json_response({'status': 'ok'})
        except Exception as e:
            return web.json_response({'error': str(e)}, status=500)

    def setup_notify_endpoint(app):
        app.router.add_post('/notify', notify_handler)

except ImportError:
    # aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî endpoint –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    def setup_notify_endpoint(app):
        pass

class TestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫."""
    waiting_for_answer = State()

# --- Multiple Choice FSM ---
class MCStates(StatesGroup):
    waiting_for_mc_answer = State()

@router.message(Command("start"))
async def cmd_start(message: Message, command: CommandObject = None):
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç (—Ç–æ–∫–µ–Ω) ‚Äî —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    if command and command.args:
        token = command.args.strip()
        telegram_id = message.from_user.id
        success, message_text = api_client.bind_telegram(token, telegram_id)
        await message.answer(message_text)
        return
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(MESSAGES['welcome'])

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await message.answer(MESSAGES['help'])

@router.message(Command("cards"))
async def cmd_cards(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cards - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = message.from_user.id
    
    success, cards = api_client.get_cards(telegram_id)
    
    if not success:
        await message.answer(MESSAGES['not_bound'])
        return
    
    if not cards:
        await message.answer(MESSAGES['no_cards'])
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    response = "üìö –¢–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n\n"
    for i, card in enumerate(cards[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        level_emoji = {
            'beginner': 'üü¢',
            'intermediate': 'üü°', 
            'advanced': 'üî¥'
        }.get(card['level'], '‚ö™')
        
        response += f"{i}. {level_emoji} <b>{card['word']}</b> ‚Äî {card['translation']}\n"
        
        if card.get('example'):
            response += f"   <i>–ü—Ä–∏–º–µ—Ä: {card['example']}</i>\n"
        
        response += "\n"
    
    if len(cards) > 10:
        response += f"... –∏ –µ—â–µ {len(cards) - 10} –∫–∞—Ä—Ç–æ—á–µ–∫"
    
    await message.answer(response, parse_mode="HTML")

@router.message(Command("today"))
async def cmd_today(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    telegram_id = message.from_user.id
    
    success, cards = api_client.get_today_cards(telegram_id)
    
    if not success:
        await message.answer(MESSAGES['not_bound'])
        return
    
    if not cards:
        await message.answer(MESSAGES['no_today'])
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ª–∏–º–∏—Ç—É Telegram)
    MAX_MSG_LEN = 4096
    head = "üìÖ –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    parts = []
    current = head
    for i, card in enumerate(cards, 1):
        level_emoji = {
            'beginner': 'üü¢',
            'intermediate': 'üü°', 
            'advanced': 'üî¥'
        }.get(card['level'], '‚ö™')
        card_text = f"{i}. {level_emoji} <b>{card['word']}</b> ‚Äî {card['translation']}\n"
        if card.get('example'):
            card_text += f"   <i>–ü—Ä–∏–º–µ—Ä: {card['example']}</i>\n"
        card_text += "\n"
        if len(current) + len(card_text) > MAX_MSG_LEN:
            parts.append(current)
            current = ""
        current += card_text
    if current:
        parts.append(current)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
    for idx, part in enumerate(parts):
        await message.answer(part, parse_mode="HTML")

@router.message(Command("progress"))
async def cmd_progress(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = message.from_user.id
    
    success, progress = api_client.get_progress(telegram_id)
    
    if not success:
        await message.answer(MESSAGES['not_bound'])
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    response = "üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
    response += f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {progress.get('total', 0)}\n"
    response += f"‚úÖ –í—ã—É—á–µ–Ω–æ: {progress.get('learned', 0)}\n"
    response += f"‚ùå –û—à–∏–±–æ–∫: {progress.get('errors', 0)}\n"
    response += f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {progress.get('repetitions', 0)}\n"
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö
    total = progress.get('total', 0)
    learned = progress.get('learned', 0)
    if total > 0:
        percentage = (learned / total) * 100
        response += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö: {percentage:.1f}%\n"
    
    await message.answer(response)

@router.message(Command("test"))
async def cmd_test(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    success, cards = api_client.get_today_cards(telegram_id)
    if not success:
        await message.answer(MESSAGES['not_bound'])
        return
    if not cards:
        await message.answer(MESSAGES['no_today'])
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ FSM
    await state.update_data(test_cards=cards, test_index=0)
    await send_next_test_card(message, state)

async def send_next_test_card(message, state):
    data = await state.get_data()
    cards = data.get('test_cards', [])
    idx = data.get('test_index', 0)
    if idx >= len(cards):
        await message.answer("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    card = cards[idx]
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ó–Ω–∞—é", callback_data=f"test_yes_{card['id']}")
    builder.button(text="‚ùå –ù–µ –∑–Ω–∞—é", callback_data=f"test_no_{card['id']}")
    builder.button(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="test_skip")
    question = f"üìù –¢–µ—Å—Ç: –ø–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ\n\n<b>{card['word']}</b>\n\n"
    if card.get('example'):
        question += f"<i>–ü—Ä–∏–º–µ—Ä: {card['example']}</i>\n\n"
    question += "–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç:"
    await message.answer(question, reply_markup=builder.as_markup(), parse_mode="HTML")

@router.callback_query(F.data.startswith("test_"))
async def handle_test_answer(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    if data == "test_skip":
        await callback.message.edit_text("–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        await callback.answer()
        # –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        user_data = await state.get_data()
        idx = user_data.get('test_index', 0) + 1
        await state.update_data(test_index=idx)
        await send_next_test_card(callback.message, state)
        return
    parts = data.split("_")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        return
    answer_type = parts[1]  # yes/no
    card_id = int(parts[2])
    telegram_id = callback.from_user.id
    answer = (answer_type == "yes")
    success, api_resp = api_client.submit_test_result(telegram_id, card_id, answer)
    if success and isinstance(api_resp, dict):
        msg = api_resp.get('msg', '')
        interval = api_resp.get('interval')
        next_review = api_resp.get('next_review')
        feedback = f"{msg}\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} –¥–Ω–µ–π: {next_review}"
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if answer:
            feedback += "\nüëç –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        else:
            feedback += "\nüëÄ –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ –µ—â—ë —Ä–∞–∑."
        await callback.message.edit_text(feedback)
    else:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {api_resp}")
    await callback.answer()
    # –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    user_data = await state.get_data()
    idx = user_data.get('test_index', 0) + 1
    await state.update_data(test_index=idx)
    await send_next_test_card(callback.message, state)

@router.message(Command("test_mc"))
async def cmd_test_mc(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    success, data = api_client.get_multiple_choice(telegram_id)
    if not success or not data.get('card'):
        await message.answer(MESSAGES.get('no_today', '–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞.'))
        return
    await state.update_data(mc_active=True)
    await send_mc_card(message, state, data)

async def send_mc_card(message, state, data):
    card = data['card']
    options = data['options']
    builder = InlineKeyboardBuilder()
    for idx, opt in enumerate(options):
        builder.button(text=opt, callback_data=f"mc_{card['id']}_{idx}")
    # –ö–Ω–æ–ø–∫–∞ –æ–∑–≤—É—á–∫–∏
    builder.button(text="‚ñ∂Ô∏è –û–∑–≤—É—á–∏—Ç—å", callback_data=f"mc_tts_{card['id']}")
    builder.adjust(2, 1)  # 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ, –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–∑–≤—É—á–∫–∞
    text = f"üìù Multiple Choice:\n\n<b>{card['word']}</b>"
    if card.get('example'):
        text += f"\n<i>–ü—Ä–∏–º–µ—Ä: {card['example']}</i>"
    if card.get('comment'):
        text += f"\n<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {card['comment']}</i>"
    text += "\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:"
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(MCStates.waiting_for_mc_answer)
    await state.update_data(mc_card_id=card['id'], mc_options=options)

@router.callback_query(lambda c: c.data.startswith("mc_"))
async def handle_mc_answer(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    if data.startswith("mc_tts_"):
        # –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞
        card_id = int(data.split("_")[2])
        user_data = await state.get_data()
        telegram_id = callback.from_user.id
        success, card_data = api_client.get_multiple_choice(telegram_id)
        word = card_data.get('card', {}).get('word') if card_data else None
        if word:
            success, audio_data = api_client.get_tts_audio(telegram_id, word)
            if success and audio_data:
                voice_file = BufferedInputFile(audio_data, filename=f"{word}.ogg")
                await callback.message.answer_voice(
                    voice=voice_file,
                    caption=f"‚ñ∂Ô∏è –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞: {word}"
                )
            else:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        await callback.answer()
        return
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∞—Ä–∏–∞–Ω—Ç)
    parts = data.split("_")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        return
    card_id = int(parts[1])
    opt_idx = int(parts[2])
    user_data = await state.get_data()
    options = user_data.get('mc_options', [])
    if 0 <= opt_idx < len(options):
        answer = options[opt_idx]
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        return
    telegram_id = callback.from_user.id
    success, resp = api_client.submit_multiple_choice(telegram_id, card_id, answer)
    if not success or not isinstance(resp, dict):
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await callback.answer()
        return
    msg = resp.get('msg', '')
    feedback = f"{msg}\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {resp.get('interval', '?')} –¥–Ω–µ–π: {resp.get('next_review', '?')}"
    await callback.message.edit_text(feedback)
    await callback.answer()
    # –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    success, data = api_client.get_multiple_choice(telegram_id)
    if not success or not data.get('card'):
        await callback.message.answer("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    await send_mc_card(callback.message, state, data)

@router.message(Command("say"))
async def cmd_say(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /say - –æ–∑–≤—É—á–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.strip()
    if text == "/say":
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say —Å–ª–æ–≤–æ")
        return
    
    word = text[5:].strip()  # –£–±–∏—Ä–∞–µ–º "/say "
    if not word:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say —Å–ª–æ–≤–æ")
        return
    
    telegram_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    success, audio_data = api_client.get_tts_audio(telegram_id, word)
    
    if not success:
        await message.answer(MESSAGES['word_not_found'])
        return
    
    if not audio_data:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice_file = BufferedInputFile(audio_data, filename=f"{word}.ogg")
    await message.answer_voice(
        voice=voice_file,
        caption=f"‚ñ∂Ô∏è –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞: {word}"
    )

@router.message()
async def handle_unknown(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ magic-—Å—Å—ã–ª–æ–∫."""
    text = message.text.strip()
    # –£–¥–∞–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∫—É /start <token> –æ—Ç—Å—é–¥–∞, —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –≤ cmd_start
    await message.answer(
        "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    ) 