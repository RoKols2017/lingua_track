#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ SpeechKit.
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞: python test_speechkit.py
"""
import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lingua_track.settings')
django.setup()

from cards.speechkit import (
    synthesize_speech, 
    SpeechKitError, 
    SpeechKitConfigError, 
    SpeechKitAPIError, 
    SpeechKitNetworkError,
    validate_environment,
    clean_audio_cache
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("=== –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    try:
        validate_environment()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_synthesis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏ fallback."""
    print("\n=== –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ ===")
    test_cases = [
        ("hello world", "en"),
        ("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä", "ru"),
        ("bonjour le monde", "fr"),  # –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å fallback
        ("test", None),  # –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (en)
        ("—Ç–µ—Å—Ç", None),  # –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (ru)
    ]
    
    for text, lang in test_cases:
        try:
            print(f"–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: '{text}' (lang={lang})")
            audio_path = synthesize_speech(text, language=lang)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {audio_path}")
            if os.path.exists(audio_path) and os.path.getsize(audio_path) > 0:
                print(f"   –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.getsize(audio_path)} –±–∞–π—Ç")
            else:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        except SpeechKitConfigError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        except SpeechKitAPIError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API ({e.status_code}): {e.message}")
        except SpeechKitNetworkError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        except SpeechKitError as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_cache_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫—ç—à–∞."""
    print("\n=== –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ ===")
    from cards.speechkit import get_audio_cache_path, is_cache_valid
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º
    fake_path = get_audio_cache_path("nonexistent")
    print(f"–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {is_cache_valid(fake_path)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if os.path.exists("media/audio"):
        audio_files = list(Path("media/audio").glob("*.ogg"))
        if audio_files:
            test_file = audio_files[0]
            print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª {test_file.name}: {is_cache_valid(test_file)}")
        else:
            print("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def test_cache_cleanup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞."""
    print("\n=== –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ ===")
    try:
        print("–û—á–∏—â–∞–µ–º –∫—ç—à...")
        clean_audio_cache()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ SpeechKit")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config_ok = test_configuration()
    
    if config_ok:
        # –¢–µ—Å—Ç 2: –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
        test_synthesis()
        
        # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
        test_cache_validation()
        
        # –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        test_cache_cleanup()
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ç–µ–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print("  YANDEX_SPEECHKIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
        print("  YANDEX_SPEECHKIT_FOLDER_ID=–≤–∞—à_folder_id")
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main() 