#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ LinguaTrack.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_tests.py                    # –í—Å–µ —Ç–µ—Å—Ç—ã
    python run_tests.py --sm2             # –¢–æ–ª—å–∫–æ SM-2
    python run_tests.py --models          # –¢–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏
    python run_tests.py --coverage        # –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    python run_tests.py --fast            # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
"""

import sys
import subprocess
import argparse
from pathlib import Path


def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\n{'='*50}")
    print(f"üöÄ {description}")
    print(f"{'='*50}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print("-" * 50)
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=False)
        print(f"\n‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ LinguaTrack")
    parser.add_argument("--sm2", action="store_true", help="–¢–µ—Å—Ç—ã SM-2 –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    parser.add_argument("--models", action="store_true", help="–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π")
    parser.add_argument("--api", action="store_true", help="–¢–µ—Å—Ç—ã API")
    parser.add_argument("--forms", action="store_true", help="–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º")
    parser.add_argument("--bot", action="store_true", help="–¢–µ—Å—Ç—ã –±–æ—Ç–∞")
    parser.add_argument("--integration", action="store_true", help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--coverage", action="store_true", help="–° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
    parser.add_argument("--fast", action="store_true", help="–¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--stop", "-x", action="store_true", help="–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ")
    
    args = parser.parse_args()
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã pytest
    pytest_cmd = ["python", "-m", "pytest"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
    if args.verbose:
        pytest_cmd.append("-v")
    if args.stop:
        pytest_cmd.append("-x")
    if args.coverage:
        pytest_cmd.extend(["--cov=.", "--cov-report=html", "--cov-report=term-missing"])
    if args.fast:
        pytest_cmd.extend(["-m", "not slow"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    if args.sm2:
        pytest_cmd.append("tests/test_sm2.py")
        description = "–¢–µ—Å—Ç—ã SM-2 –∞–ª–≥–æ—Ä–∏—Ç–º–∞"
    elif args.models:
        pytest_cmd.append("tests/test_models.py")
        description = "–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π"
    elif args.api:
        pytest_cmd.append("tests/test_api.py")
        description = "–¢–µ—Å—Ç—ã API"
    elif args.forms:
        pytest_cmd.append("tests/test_forms.py")
        description = "–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º"
    elif args.bot:
        pytest_cmd.append("tests/test_bot.py")
        description = "–¢–µ—Å—Ç—ã Telegram-–±–æ—Ç–∞"
    elif args.integration:
        pytest_cmd.append("tests/test_integration.py")
        description = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    else:
        pytest_cmd.append("tests/")
        description = "–í—Å–µ —Ç–µ—Å—Ç—ã"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_command(pytest_cmd, description)
    
    if success:
        print(f"\nüéâ {description} –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        if args.coverage:
            print("üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: htmlcov/index.html")
        sys.exit(0)
    else:
        print(f"\nüí• {description} –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main() 